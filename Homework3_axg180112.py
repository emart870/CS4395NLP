# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mNTzpKjlOtADuiamKjAfYDaSWg22Ts2w
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# #Step 0: Import Statements
# import re
# import random
# import sys
# #import nltk
# from nltk import pos_tag
# from nltk import word_tokenize
# from nltk.corpus import stopwords
# from nltk.stem import WordNetLemmatizer
# 
# nltk.download("all")

#Step 1: Reading in the File and Removing New-Line Characters
def readInFile(path):
  f = open(path, "r")
  text = f.read().replace('\n', ' ')
  return text

#Step 2: Lexical Diversity
def lexicalDeiversityOfText(text):
  tokens = word_tokenize(text)
  print("The number of tokens in anat19: " + str(len(tokens)))
  uniqueTokens = set(tokens)
  print("The number of unique tokens in anat19: " + str(len(uniqueTokens)))
  print("Lexical diversity: " + "{:.2f}".format((len(uniqueTokens)/len(tokens))) + "\n")

#Step 3: Function That Preprocess The Raw Text
def preprocessRawText(text):
  #Step 3a: Making A List Of Tokens That Contain Only Alphabetical Characters, Are Not In The Stopwords List, And Have A Length Of More Than 5
  lowerTokens = [token.lower() for token in word_tokenize(text) if token.isalpha() and token not in stopwords.words("english") and len(token)>5]

  #Step 3b: Making lemmas out of the tokens and using set to get unique tokens
  wnl = WordNetLemmatizer()
  lemmas = [wnl.lemmatize(t) for t in lowerTokens]
  uniqueLemmas = list(set(lemmas))

  #Step 3c: Part-Of-Speech Tagging The Unique Lemmas and Print the First 20 Tagged Items
  tags = nltk.pos_tag(uniqueLemmas)
  print("First 20 tagged lemmas")
  print(tags[0:20])
  print()

  #Step 3d: Create A List Of Only Those Lemmas That Are Nouns
  nounLemmas = [lemma for (lemma, tag) in tags if tag.upper().startswith("N")]

  #Step 3e: Printing The Number Of Tokens From Step 3.a And The Number Of Nouns From Step 3.d
  print("Number of Tokens:", len(lowerTokens))
  print("Number of Nouns:", len(nounLemmas))
  print()

  return (lowerTokens, nounLemmas)

#Step 4: Make A Dictionary Of {noun:count of noun in tokens}
def nounCountDictionary(lowerTokens, nouns):
#(lowerTokens, nouns) = preprocessRawText()
  nounDict = {}
  for token in lowerTokens:
    if token in nouns:
      if token not in nounDict:
          nounDict[token] = 1
      else:
          nounDict[token] += 1

  #50 most Common Words And Their Counts
  commonNouns = sorted(nounDict, key=nounDict.get, reverse=True)[0:50]
  print("Top 50 common nouns")
  for noun in commonNouns:
    print(noun + ": " + str(nounDict[noun]))
  print()
  return commonNouns

#Step 5: Guessing Game!
def guessingGame(commonNouns):
  #Setting up the variables
  print("Let's play a word-guessing game!")
  print("To exit at anytime, enter \'!\'")
  points = 5
  userInput = ""
  guessedRight = False

  #While-loop where each loop is one game
  while(points >= 0 and userInput != "!" and not guessedRight):
    print("Current score:", points)
    wordToGuess = random.choice(commonNouns)

    #A dictionary to keep track of which letters were guessed
    lettersDict = {}
    for letter in list(set(wordToGuess)):
      lettersDict[letter] = False
    
    #While-loop where each loop is one guess
    while(True):
      #Checking if all the letters have been guessed. If so, break
      guessedRight = True
      for letter in lettersDict:
        guessedRight = guessedRight and lettersDict[letter]
      if guessedRight:
        break
      
      #Displaying the partially solved word
      display = ""
      for letter in wordToGuess:
        display += (letter + " ") if lettersDict[letter] else "_ "
      print(display)

      #Getting the guess from the user
      userInput = input("Guess a letter: ").lower()

      if userInput == "!":  #Entering '!' means you want the game to end
        break

      elif userInput not in wordToGuess:  #If the guess isn't in the word, reduce points by 1
        points -= 1
        if points < 0:  #If points is negative, break
          break
        else:
          print("Sorry, that letter isn't in the word. Try again. Score is now", points, "\n")
      
      elif lettersDict[userInput] == True:  #If the guess is correct but already guessed, reduce points by 1
        points -= 1
        print("Sorry, you already guessed this letter. Try again. Score is now", points, "\n")
      
      else: #If the guess is correct and not already guessed, increase points by 1
        points += 1
        lettersDict[userInput] = True;
        print("Correct! Score is now", points, "\n")
  
    if guessedRight:  #If the user guessed the word, congratulate them and start up another round 
      print("You guessed right!\nNow guess another wordd")
      guessedRight = False
    else:
      print("\nGame is now over. The word was", wordToGuess)

if __name__ == "__main__":
#  for arg in sys.argv:
#    print(arg)
  
  if len(sys.argv) < 2:
    fp = input("Please enter a filename as a system arg")
  else:
    fp = sys.argv[1]

  fp = "anat19.txt" if fp == "-f" else fp 
  text = readInFile(fp)
  lexicalDeiversityOfText(text)
  (lowerTokens, nouns) = preprocessRawText(text)
  commonNouns = nounCountDictionary(lowerTokens, nouns)
  guessingGame(commonNouns)